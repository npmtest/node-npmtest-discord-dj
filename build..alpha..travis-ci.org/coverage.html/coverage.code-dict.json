{"/home/travis/build/npmtest/node-npmtest-discord-dj/test.js":"/* istanbul instrument in package npmtest_discord_dj */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-discord-dj/lib.npmtest_discord_dj.js":"/* istanbul instrument in package npmtest_discord_dj */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_discord_dj = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_discord_dj = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-discord-dj/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-discord-dj && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_discord_dj */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_discord_dj\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_discord_dj.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_discord_dj.rollup.js'] =\n            local.assetsDict['/assets.npmtest_discord_dj.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_discord_dj.__dirname + '/lib.npmtest_discord_dj.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/index.js":"/*\r\n * This is the API of the module\r\n */\r\nconst Utils = require('./Logic/Utils.js');\r\n\r\nmodule.exports = {\r\n\r\n    DJManager: require('./Logic/DJManager.js'),\r\n\r\n    // Logic\r\n    DJ: require('./Logic/DJ.js'),\r\n    Playable: require('./Logic/Playable.js'),\r\n    Playlist: require('./Logic/Playlist.js'),\r\n    Decoder: require('./Logic/Decoder.js'),\r\n\r\n    // Decoders\r\n    FFmpegDecoder: require('./Audio/Decoders/FFmpegDecoder.js'),\r\n    ChiptuneDecoder: require('./Audio/Decoders/ChiptuneDecoder.js'),\r\n\r\n    // Audio\r\n    FileAudio: require('./Audio/FileAudio.js'),\r\n    YoutubeVideo: require('./Audio/YoutubeVideo.js'),\r\n    IcyAudio: require('./Audio/IcyAudio.js'),\r\n    StreamAudio: require('./Audio/StreamAudio.js'),\r\n    SoundcloudAudio: require('./Audio/SoundcloudAudio.js'),\r\n\r\n    // Playlists\r\n    DirectoryPlaylist: require('./Audio/Playlist/DirectoryPlaylist.js'),\r\n    FilePlaylist: require('./Audio/Playlist/FilePlaylist.js'),\r\n    SoundcloudPlaylist: require('./Audio/Playlist/SoundcloudPlaylist.js'),\r\n    YoutubePlaylist: require('./Audio/Playlist/YoutubePlaylist.js'),\r\n\r\n    // Default DJ Implementation\r\n    BotDJ: require('./Bot/BotDJ.js'),\r\n    Mode: require('./Bot/Mode.js'),\r\n    DJMode: require('./Bot/DJMode.js'),\r\n    PlaylistMode: require('./Bot/PlaylistMode.js'),\r\n\r\n    // Other functions\r\n    registerDecoder: Utils.registerDecoder,\r\n    getDecoders: Utils.getDecoders\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Logic/Utils.js":"module.exports = {\r\n\r\n    // Regular Expressions\r\n    YTRegex: /(?:https?:\\/\\/)?(?:www\\.)?youtu(?:be\\.com\\/watch\\?v=|\\.be\\/)([\\w\\-]+)(&(amp;)?[\\w\\?=]*)?/,\r\n    SCRegex: /(?:https?:\\/\\/)?(?:www\\.)?(?:soundcloud\\.com|snd\\.sc)\\/(.*)/,\r\n    YTPlaylistRegex: /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/playlist\\?list=([A-Za-z0-9_-]+)/,\r\n    SCPlaylistRegex: /(?:https?:\\/\\/)?(?:www\\.)?soundcloud\\.com\\/([a-zA-Z0-9]+)\\/sets\\/(.*)/,\r\n\r\n    include: function(pkg) {\r\n        try {\r\n            return require(pkg);\r\n        } catch(e) {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    exists: function(obj) {\r\n        if(obj === undefined) return false;\r\n        if(obj == null) return false;\r\n        if(obj == '') return false;\r\n        return true;\r\n    },\r\n\r\n    getExtension(filename) {\r\n        var pos = filename.lastIndexOf('.');\r\n        if(pos == -1) return null;\r\n        return filename.substring(pos + 1);\r\n    },\r\n\r\n    registerDecoder(decoder) {\r\n        if(typeof global.decoders == 'undefined') {\r\n            global.decoders = [];\r\n        }\r\n        global.decoders.push(decoder);\r\n    },\r\n\r\n    getDecoders() {\r\n        if(typeof global.decoders == 'undefined') {\r\n            return [];\r\n        }\r\n        global.decoders.sort(function(decoder1, decoder2) {\r\n            return decoder1.getPriority() - decoder2.getPriority();\r\n        });\r\n\r\n        return global.decoders;\r\n    }\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Logic/DJManager.js":"\"use strict\";\r\n\r\nvar Discordie = require('discordie');\r\nvar DJ = require('./DJ.js');\r\n\r\nvar createHandler = require('./ChatHandler.js');\r\n\r\nclass DJManager {\r\n\r\n    /**\r\n     * DJManager constructor\r\n     * @param credentials The credentials (an object with token, email and password) or a Discordie bot instance\r\n     */\r\n    constructor(credentials) {\r\n        if(credentials instanceof Discordie) {\r\n            this.credentials = null;\r\n            this.bot = credentials;\r\n            this.ready = true;\r\n        } else {\r\n            this.credentials = credentials;\r\n            this.bot = null;\r\n            this.ready = false;\r\n        }\r\n\r\n        this.handler = null;\r\n        this.djs = [];\r\n\r\n        this.keys = {\r\n            youtube: null,\r\n            soundcloud: null\r\n        };\r\n    }\r\n\r\n    /**\r\n     * This will login using the credentials.\r\n     * The execution of this method is not required\r\n     * @param callback The callback fired when the login is successfully made. Optional\r\n     */\r\n    login(callback) {\r\n        if(this.bot == null && this.credentials != null) {\r\n            this.bot = new Discordie();\r\n            this.bot.connect(this.credentials, true);\r\n            this.credentials = null;\r\n        }\r\n\r\n        if(this.ready) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        this.bot.Dispatcher.once(Discordie.Events.GATEWAY_READY, function(e) {\r\n            this.ready = true;\r\n            if(callback !== undefined) callback();\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * This will create a new DJ\r\n     * @param voiceChannel The voice channel name/id or a Discordie voice channel instance\r\n     * @param type The class of the DJ. Optional\r\n     * @return Promise\r\n     */\r\n    create(voiceChannel, type) {\r\n        if(voiceChannel == null) throw new Error('The voice channel can not be null');\r\n        if(type === undefined) type = DJ;\r\n\r\n        if(this.handler == null) {\r\n            this.handler = createHandler(this.bot, this);\r\n            this.handler.register();\r\n        }\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            if (this.bot == null || !this.ready) {\r\n                this.login(function() {\r\n                    this.create(voiceChannel, type).then(resolve, reject);\r\n                }.bind(this));\r\n            } else {\r\n\r\n                if(voiceChannel instanceof String || typeof voiceChannel == 'string') {\r\n                    voiceChannel = this.getVoiceChannel(voiceChannel, true, true);\r\n                } else if(voiceChannel.join === undefined) {\r\n                    if (voiceChannel.id !== undefined) {\r\n                        voiceChannel = this.getVoiceChannel(voiceChannel.id, true, false);\r\n                    } else {\r\n                        return reject('Invalid Voice Channel');\r\n                    }\r\n                }\r\n                if(voiceChannel == null) return reject('The voice channel was not found');\r\n\r\n                voiceChannel.join(false, false).then(function(info) {\r\n                    var dj = new type(this.bot, info.voiceConnection, this.handler, this.keys);\r\n                    this.djs.push(dj);\r\n                    resolve(dj);\r\n                }.bind(this), reject);\r\n            }\r\n\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Gets the DJ based on a user server/channel\r\n     * @param user The user object\r\n     * @return DJ\r\n     */\r\n    getFromUser(user) {\r\n        var guild = user.guild_id !== undefined ? user.guild : null;\r\n        var vc = guild != null ? user.getVoiceChannel(guild) : null;\r\n\r\n        if(guild != null && vc == null) {\r\n            return null;\r\n        }\r\n\r\n        for(var i = 0; i < this.djs.length; i++) {\r\n            var dj = this.djs[i];\r\n\r\n            if(dj.voiceConnection === undefined) continue;\r\n            var channel = dj.voiceConnection.channel;\r\n            if(guild != null) {\r\n                if(vc == channel) return dj;\r\n            } else {\r\n                if(dj.voiceConnection == null) continue;\r\n                guild = dj.voiceConnection.guild;\r\n                if(guild == null) continue;\r\n                vc = user.getVoiceChannel(guild);\r\n                if(vc != null && vc == channel) return dj;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Destroys a DJ\r\n     * @param dj The DJ object\r\n     * @return boolean Whether the DJ was successfully destroyed\r\n     */\r\n    destroy(dj) {\r\n        var i = this.djs.indexOf(dj);\r\n        if(i != -1) {\r\n            this.djs.splice(index, 1);\r\n            dj.destroy();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a voice channel instance from a name or id\r\n     * @param str The voice channel name/id\r\n     * @param checkId True to allow str be a voice channel id\r\n     * @param checkName True to allow str be a voice channel name\r\n     * @return IVoiceChannel The Discordie voice channel instance or null\r\n     */\r\n    getVoiceChannel(str, checkId, checkName) {\r\n        var guilds = this.bot.Guilds.toArray();\r\n        for(var i = 0; i < guilds.length; i++) {\r\n            var guild = guilds[i];\r\n            for(var o = 0; o < guild.voiceChannels.length; o++) {\r\n                var vc = guild.voiceChannels[o];\r\n\r\n                if(checkId && vc.id == str) {\r\n                    return vc;\r\n                }\r\n                if(checkName && vc.name == str) {\r\n                    return vc;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets a global Youtube key. It will be used in all DJs created by this manager.\r\n     * Note that you have to set it before creating the DJs\r\n     * @param key The Youtube API Key\r\n     */\r\n    setYoutubeKey(key) {\r\n        this.keys.youtube = key;\r\n    }\r\n\r\n    /**\r\n     * Sets a global Soundcloud key. It will be used in all DJs created by this manager.\r\n     * Note that you have to set it before creating the DJs\r\n     * @param key The Soundcloud API Key\r\n     */\r\n    setSoundcloudKey(key) {\r\n        this.keys.soundcloud = key;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = DJManager;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Logic/DJ.js":"\"use strict\";\r\n\r\nvar InternalDJ = require('./InternalDJ.js');\r\nvar EventEmitter = require('events').EventEmitter;\r\n\r\nclass DJ extends EventEmitter {\r\n\r\n    constructor(bot, voiceConnection, handler, keys) {\r\n        super();\r\n\r\n        this.dj = new InternalDJ(bot, voiceConnection, this, handler, keys);\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n    play(playable) {\r\n        this.dj.play(playable);\r\n    }\r\n\r\n    skip() {\r\n        this.dj.skip();\r\n    }\r\n\r\n    addToQueue(playable) {\r\n        this.dj.addToQueue(playable);\r\n    }\r\n\r\n    get nowPlaying() {\r\n        return this.dj.playable;\r\n    }\r\n\r\n    get playable() {\r\n        return this.dj.playable;\r\n    }\r\n\r\n    get bot() {\r\n        return this.dj.bot;\r\n    }\r\n\r\n    get voiceConnection() {\r\n        return this.dj.voiceConnection;\r\n    }\r\n\r\n    get handler() {\r\n        return this.dj.handler;\r\n    }\r\n\r\n    get multithreaded() {\r\n        return this.dj.multithreaded;\r\n    }\r\n\r\n    set multithreaded(b) {\r\n        this.dj.multithreaded = b;\r\n    }\r\n\r\n    set encoderCommand(cmd) {\r\n        this.dj.decoderCmd = cmd;\r\n    }\r\n\r\n    get keys() {\r\n        return this.dj.keys;\r\n    }\r\n\r\n    set bitrate(bitrate) {\r\n        this.dj.bitrate = bitrate;\r\n    }\r\n\r\n    get bitrate() {\r\n        return this.dj.bitrate;\r\n    }\r\n\r\n    get queue() {\r\n        return this.dj.musicQueue;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = DJ;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Logic/InternalDJ.js":"\"use strict\";\r\rvar Discordie = require('discordie');\rvar Utils = require('./Utils.js');\r\rclass InternalDJ {\r\r    constructor(bot, voiceConnection, wrapper, handler, keys) {\r        this.bot = bot;\r        this.wrapper = wrapper;\r        this.handler = handler; /* TODO: use it in the future */\r        this.voiceConnection = voiceConnection;\r        this.playable = null;\r        this.musicQueue = [];\r\r        this.stream = null;\r        this.decoder = null;\r        this.encoder = null;\r        this.multithreaded = false;\r        this.bitrate = 64;\r        this.stopping = false;\r\r        this.keys = keys;\r\r        this.disconnectedEvent = function(info) {\r            if(info.voiceConnection == this.voiceConnection) this.destroy();\r        }.bind(this);\r        this.bot.Dispatcher.on(Discordie.Events.VOICE_DISCONNECTED, this.disconnectedEvent);\r    }\r\r    destroy() {\r        this.bot.Dispatcher.removeListener(Discordie.Events.VOICE_DISCONNECTED, this.disconnectedEvent);\r    }\r\r    decodeStream(stream, format, sampleRate, channels) {\r        if(typeof format == 'undefined') format = null;\r        var options = {\r            sampleRate: sampleRate,\r            channels: channels\r        };\r        var decoders = Utils.getDecoders();\r        for(var i = 0; i < decoders.length; i++) {\r            var decoder = decoders[i];\r            if(decoder.canDecode(format)) {\r                this.decoder = decoder;\r                return decoder.createDecoder(stream, options);\r            }\r        }\r\r        return Promise.reject('No decoder found');\r    }\r\r    playStream(stream, sampleRate, channels, bitDepth) {\r        var options = {\r            frameDuration: 60,\r            sampleRate: sampleRate,\r            channels: channels,\r            float: false,\r            multiThreadedVoice: this.multithreaded,\r            bitrate: this.bitrate\r        };\r\r        var readSize = sampleRate / 1000 * options.frameDuration * bitDepth / 8 * channels;\r        var playable = this.playable;\r\r        stream.once('readable', function() {\r            if(this.playable != playable) return;\r            this.encoder = this.voiceConnection.getEncoder(options);\r            if(this.encoder == null) return;\r\r            this.encoder.onNeedBuffer = function() {\r                if(this.stopping) return;\r                if(this.playable != playable) return this.stop();\r                if(this.decoder == null) return;\r                if(stream == null) return;\r\r                var chunk = stream.read(readSize);\r\r                if(!chunk) return setTimeout(this.encoder.onNeedBuffer, options.frameDuration);\r\r                var sampleCount = readSize / channels / (bitDepth / 8);\r                this.encoder.enqueue(chunk, sampleCount);\r            }.bind(this);\r            this.encoder.onNeedBuffer();\r\r        }.bind(this));\r    }\r\r    play(playable) {\r        this.stop();\r        playable.init(this);\r        this.playable = playable;\r\r        var sampleRate = 48000;\r        var bitDepth = 16;\r        var channels = 2;\r\r        playable.createStream().then(function(stream) {\r\r            if(this.playable != playable) return;\r            this.stream = stream;\r\r            this.decodeStream(this.stream, playable.getFormat(), sampleRate, channels).then(function(decodedStream) {\r\r                decodedStream.once('end', function() {\r                    if(this.stopping) return;\r                    if(this.playable != playable) return;\r                    this.playable = null;\r                    this.stream = null;\r                    this.skip();\r                }.bind(this));\r                decodedStream.once('readable', function() {\r                    if(this.playable != playable) return;\r                    this.wrapper.emit('play');\r                }.bind(this));\r                this.playStream(decodedStream, sampleRate, channels, bitDepth);\r\r            }.bind(this), function(err) {\r                console.log(\"Music skipped by a decoder error: \" + err);\r            });\r\r        }.bind(this), function(error) {\r\r            console.log(\"Music skipped by an error: \" + error);\r            this.skip();\r\r        }.bind(this));\r    }\r\r    stop() {\r        if(this.stopping) return;\r        this.stopping = true;\r\r        try {\r\r            if(this.decoder != null) {\r                this.decoder.destroyDecoder();\r                this.decoder = null;\r            }\r            if(this.encoder != null) {\r                this.encoder.kill();\r                this.encoder = null;\r            }\r            if(this.stream != null) {\r                if(this.stream.end) this.stream.end();\r                if(this.stream.destroy) this.stream.destroy();\r                this.stream = null;\r            }\r\r        } catch(e) {\r            console.log(\"An error ocurred while stopping the current music: \" + e);\r        }\r\r        this.stopping = false;\r    }\r\r    skip() {\r        this.stop();\r        if(this.playable != null) {\r            this.playable.removeAllListeners('data-changed');\r            this.playable = null;\r        }\r        this.wrapper.emit('skip');\r        if(this.playable == null && this.musicQueue.length > 0) {\r            this.play(this.musicQueue.shift());\r        }\r    }\r\r    addToQueue(playable) {\r        playable.on('data-changed', function() {\r            this.wrapper.emit('data-changed');\r        }.bind(this));\r        playable.loadData();\r        if(this.playable == null) {\r            this.play(playable);\r        } else {\r            this.musicQueue.push(playable);\r        }\r    }\r\r}\r\rmodule.exports = InternalDJ;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Logic/ChatHandler.js":"\"use strict\";\r\n\r\nvar Utils = require('./Utils.js');\r\nvar registerBasicCommands = require('../Bot/Commands.js');\r\n\r\nvar Discordie = Utils.include('discordie');\r\nvar DiscordJS = Utils.include('discord.js');\r\nvar DiscordIO = Utils.include('discord.io');\r\n\r\n/**\r\n * A base class to handle chat.\r\n * This class should be extended to support other libraries and the official Discord API in the future.\r\n */\r\nclass ChatHandler {\r\n\r\n    constructor(manager) {\r\n        this.manager = manager;\r\n        this.commands = {};\r\n        this.prefixes = [];\r\n\r\n        this.permissions = {\r\n            MANAGE_PERMISSIONS: null,\r\n            VOICE_MUTE: null\r\n        };\r\n    }\r\n\r\n    register() {\r\n        registerBasicCommands(this);\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n    addCommandPrefix(prefix) {\r\n        this.prefixes.push(prefix);\r\n    }\r\n\r\n    setCommandPermission(id, permission) {\r\n        if(this.commands[id] === undefined) return false;\r\n        this.commands[id].permission = permission;\r\n        return true;\r\n    }\r\n\r\n    registerCommand(id, aliases, runnable, defaultPerm) {\r\n        this.commands[id] = {\r\n            alias: aliases,\r\n            run: runnable,\r\n            permission: defaultPerm\r\n        }\r\n    }\r\n\r\n    deregisterCommand(id) {\r\n        delete this.commands[id];\r\n    }\r\n\r\n    createCommandHandler() {\r\n        return function(obj, authorObj, content, server) {\r\n\r\n            var args = content.split(' ');\r\n\r\n            var prefixed = false;\r\n            for(var i = 0; i < this.prefixes.length; i++) {\r\n                var prefix = this.prefixes[i];\r\n                if(args[0].substring(0, prefix.length) == prefix) {\r\n                    args[0] = args[0].substring(prefix.length);\r\n                    prefixed = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(!prefixed && server != null) return false;\r\n\r\n            for(var cmd in this.commands) {\r\n\r\n                var command = this.commands[cmd];\r\n                if(command === undefined) continue;\r\n                if(command.alias.indexOf(args[0]) == -1) continue;\r\n\r\n                var dj = this.manager.getFromUser(authorObj);\r\n\r\n                if(command.permission != null) {\r\n                    if(dj == null) {\r\n                        return; // Just ignore the message for now\r\n                    } else if(!this.hasPermission(authorObj, command.permission, dj.voiceConnection.channel)) {\r\n                        this.sendPrivateMessage(authorObj, \"You don't have permission for this command.\");\r\n                        return;\r\n                    }\r\n                }\r\n                if(server != null) this.deleteMessage(obj);\r\n\r\n                var label = args[0];\r\n\r\n                try {\r\n                    command.run(this, obj, authorObj, dj, args);\r\n                } catch(e) {\r\n                    console.log(\"A command threw an error (\" + label + \"): \" + e);\r\n                }\r\n                return;\r\n\r\n            }\r\n\r\n            if(server == null && this.commands['raw-pm'] != null) {\r\n                try {\r\n                    this.commands['raw-pm'].run(this, obj, authorObj, this.manager.getFromUser(authorObj), args);\r\n                } catch(e) {\r\n                    console.log(\"A command threw an error (raw pm): \" + e);\r\n                }\r\n            }\r\n\r\n        }.bind(this);\r\n    }\r\n\r\n    mention(user) {\r\n\r\n    }\r\n\r\n    sendMessage(channelObj, msg) {\r\n\r\n    }\r\n\r\n    sendPrivateMessage(authorObj, msg) {\r\n\r\n    }\r\n\r\n    updateMessage(obj, msg) {\r\n\r\n    }\r\n\r\n    deleteMessage(obj) {\r\n\r\n    }\r\n\r\n    hasPermission(authorObj, server, perm) {\r\n\r\n    }\r\n\r\n    addRole(user, role) {\r\n\r\n    }\r\n\r\n    removeRole(user, role) {\r\n\r\n    }\r\n\r\n}\r\n\r\nclass DiscordieChatHandler extends ChatHandler {\r\n\r\n    constructor(bot, manager) {\r\n        super(manager);\r\n        this.bot = bot;\r\n\r\n        //TODO fix\r\n        this.permissions.MANAGE_PERMISSIONS = 1 << 3;//Discordie.Permissions.General.MANAGE_ROLES;\r\n        this.permissions.VOICE_MUTE = 1 << 22;//Discordie.Permissions.Voice.MUTE_MEMBERS;\r\n    }\r\n\r\n    register() {\r\n        super.register();\r\n        this.cmdHandler = this.createCommandHandler();\r\n        this.bot.Dispatcher.on(Discordie.Events.MESSAGE_CREATE, this.cmdHandler);\r\n    }\r\n\r\n    destroy() {\r\n        this.bot.Dispatcher.removeListener(Discordie.Events.MESSAGE_CREATE, this.cmdHandler);\r\n    }\r\n\r\n    createCommandHandler() {\r\n        var cmdHandler = super.createCommandHandler();\r\n        return function(e) {\r\n            cmdHandler(e.message, e.message.author, e.message.content, e.message.channel.guild);\r\n        }.bind(this);\r\n    }\r\n\r\n    mention(user) {\r\n        return user.mention;\r\n    }\r\n\r\n    sendMessage(channelObj, msg) {\r\n        return channelObj.sendMessage(msg);\r\n    }\r\n\r\n    sendPrivateMessage(authorObj, msg) {\r\n        return authorObj.openDM().then(function(dm) {\r\n            dm.sendMessage(msg);\r\n        });\r\n    }\r\n\r\n    updateMessage(obj, msg) {\r\n        obj.edit(msg);\r\n    }\r\n\r\n    deleteMessage(obj) {\r\n        obj.delete();\r\n    }\r\n\r\n    hasPermission(authorObj, perm, where) {\r\n        return authorObj.can(perm, where);\r\n    }\r\n\r\n    addRole(member, role) {\r\n        if(role == null) return;\r\n        member.assignRole(role);\r\n    }\r\n\r\n    removeRole(member, role) {\r\n        if(role == null) return;\r\n        member.unassignRole(role);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = function(bot, manager) {\r\n\r\n    if(Discordie != null && bot instanceof Discordie) {\r\n        return new DiscordieChatHandler(bot, manager);\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Bot/Commands.js":"var Utils = require('../Logic/Utils.js');\r\n\r\nvar YoutubeVideo = require('../Audio/YoutubeVideo.js');\r\nvar SoundcloudAudio = require('../Audio/SoundcloudAudio.js');\r\nvar IcyAudio = require('../Audio/IcyAudio.js');\r\nvar FileAudio = require('../Audio/FileAudio.js');\r\n\r\nvar skip = function(handler, obj, userObj, dj, args) {\r\n    if(dj != null) dj.skip();\r\n};\r\n\r\nvar youtube = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(args.length < 2) {\r\n        handler.sendPrivateMessage(user, '/' + args[0] + ' `youtube video url`');\r\n        return;\r\n    }\r\n    var yt = null;\r\n    try {\r\n        yt = new YoutubeVideo(args[1], user);\r\n    } catch(e) {\r\n        handler.sendPrivateMessage(user, 'Invalid Song URL');\r\n        return;\r\n    }\r\n    dj.addToQueue(yt);\r\n};\r\n\r\nvar soundcloud = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(args.length < 2) {\r\n        handler.sendPrivateMessage(user, '/' + args[0] + ' `soundcloud track url`');\r\n        return;\r\n    }\r\n    var sc = null;\r\n    try {\r\n        sc = new SoundcloudAudio(args[1], user);\r\n    } catch(e) {\r\n        handler.sendPrivateMessage(user, 'Invalid Song URL');\r\n        return;\r\n    }\r\n    dj.addToQueue(sc);\r\n};\r\n\r\nvar icy = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(args.length < 2) {\r\n        handler.sendPrivateMessage(user, '/' + args[0] + ' `icy stream url`');\r\n        return;\r\n    }\r\n    var icy = null;\r\n    try {\r\n        icy = new IcyAudio(args[1], user);\r\n    } catch(e) {\r\n        handler.sendPrivateMessage(user, 'Invalid Song URL');\r\n        return;\r\n    }\r\n    dj.addToQueue(icy);\r\n};\r\n\r\nvar file = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(args.length < 2) {\r\n        handler.sendPrivateMessage(user, '/' + args[0] + ' `file path`');\r\n        return;\r\n    }\r\n    args.shift(); // Remove first element: the command\r\n    var filename = args.join(' ');\r\n    var f = null;\r\n    try {\r\n        f = new FileAudio(filename, user);\r\n    } catch(e) {\r\n        handler.sendPrivateMessage(user, 'Invalid Song URL');\r\n        return;\r\n    }\r\n    dj.addToQueue(f);\r\n};\r\n\r\nvar add = function(handler, obj, user, dj, args) {\r\n\r\n    if(dj == null) return;\r\n    if(args.length < 2) {\r\n        handler.sendPrivateMessage(user, '/' + args[0] + ' `url`');\r\n        return;\r\n    }\r\n    if(Utils.YTRegex.test(args[1])) {\r\n        dj.addToQueue(new YoutubeVideo(args[1], user));\r\n    } else if(Utils.SCRegex.test(args[1])) {\r\n        dj.addToQueue(new SoundcloudAudio(args[1], user));\r\n    } else {\r\n        handler.sendPrivateMessage(user, 'Invalid URL');\r\n    }\r\n};\r\n\r\nvar pmHandler = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(Utils.YTRegex.test(args[0])) {\r\n        dj.addToQueue(new YoutubeVideo(args[0], user));\r\n    } else if(Utils.SCRegex.test(args[0])) {\r\n        dj.addToQueue(new SoundcloudAudio(args[0], user));\r\n    }\r\n};\r\n\r\nvar queue = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    var q = dj.queue;\r\n    var msg = '';\r\n    if(dj.playable != null) {\r\n        msg += '**Now Playing:** ' + dj.playable.getTitle() + \"\\n\";\r\n        for(var i = 0; i < q.length; i++) {\r\n            msg += \"\\n\" + (i + 1) + '. **' + q[i].getTitle() + '**';\r\n        }\r\n    } else {\r\n        msg += 'The queue is empty';\r\n    }\r\n    handler.sendPrivateMessage(user, msg);\r\n};\r\n\r\nmodule.exports = function(handler) {\r\n    handler.registerCommand('skip', ['skip', 'skp', 'next'], skip, handler.permissions.VOICE_MUTE);\r\n    handler.registerCommand('add', ['add', 'song', 'music', 'set'], add, handler.permissions.VOICE_MUTE);\r\n    handler.registerCommand('youtube', ['youtube', 'yt', 'video'], youtube, handler.permissions.VOICE_MUTE);\r\n    handler.registerCommand('soundcloud', ['soundcloud', 'sc'], soundcloud, handler.permissions.VOICE_MUTE);\r\n    handler.registerCommand('icy', ['icy', 'shoutcast', 'icecast', 'stream'], icy, handler.permissions.VOICE_MUTE);\r\n    handler.registerCommand('file', ['file', 'fs', 'mp3'], file, handler.permissions.VOICE_MUTE);\r\n    handler.registerCommand('queue', ['queue', 'list', 'playing'], queue, null);\r\n\r\n    handler.registerCommand('raw-pm', [], pmHandler, handler.permissions.VOICE_MUTE);\r\n};","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/YoutubeVideo.js":"\"use strict\";\r\n\r\nvar Playable = require('../Logic/Playable.js');\r\nvar Utils = require('../Logic/Utils.js');\r\nvar youtube = require('ytdl-core');\r\n\r\nclass YoutubeVideo extends Playable {\r\n\r\n    constructor(video, user) {\r\n        super(user);\r\n\r\n        if(!Utils.YTRegex.test(video)) {\r\n            throw new Error('Invalid URL');\r\n        }\r\n\r\n        this.video = video.replace(\"https://\", \"http://\"); // YTDL does not recognizes https :(\r\n\r\n        this.title = this.video;\r\n        this.url = null;\r\n        this.dataLoaded = false;\r\n    }\r\n\r\n    loadData() {\r\n        if(this.dataLoaded) return;\r\n        youtube.getInfo(this.video, function(error, info) {\r\n            if(error != null) {\r\n                console.log('Could not load information from a Youtube video: ' + error);\r\n            } else {\r\n                this.title = info.title;\r\n                this.url = info.loaderUrl;\r\n                this.dataLoaded = true;\r\n                this.emit('data-changed');\r\n            }\r\n        }.bind(this));\r\n    }\r\n\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n        return '`' + this.url + '`';\r\n    }\r\n\r\n    filterVideo(format) {\r\n        return format.container === 'mp4';\r\n    }\r\n\r\n    createStream() {\r\n        // Using a new instance of Promise instead of Promise.resolve to catch ytdl-core's crashes\r\n        return new Promise(function(resolve, reject) {\r\n            resolve(youtube(this.video, {filter: this.filterVideo, quality: 'lowest'}));\r\n        }.bind(this));\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = YoutubeVideo;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Logic/Playable.js":"\"use strict\";\r\n\r\nvar EventEmitter = require('events').EventEmitter;\r\n\r\nclass Playable extends EventEmitter {\r\n\r\n    constructor(user) {\r\n        super();\r\n        if(typeof user == 'undefined') user = null;\r\n        this.user = user;\r\n    }\r\n\r\n    init(dj) {\r\n\r\n    }\r\n\r\n    loadData() {\r\n        this.emit('data-changed');\r\n    }\r\n\r\n    getTitle() {\r\n        return 'Untitled';\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n        return null;\r\n    }\r\n\r\n    getFormat() {\r\n        return null;\r\n    }\r\n\r\n    createStream() {\r\n        return Promise.reject('Invalid Playable');\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Playable;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/SoundcloudAudio.js":"\"use strict\";\r\n/*\r\n * ATTENTION!\r\n * Before using this class, make sure you read the Terms of Use from the Soundcloud API\r\n * https://developers.soundcloud.com/docs/api/terms-of-use\r\n */\r\n\r\nvar Playable = require('../Logic/Playable.js');\r\nvar Utils = require('../Logic/Utils.js');\r\nvar https = require('https');\r\n\r\nclass SoundcloudAudio extends Playable {\r\n\r\n    constructor(url, key, user) {\r\n        super(user);\r\n\r\n        if(!Utils.SCRegex.test(url)) {\r\n            throw new Error('Invalid URL');\r\n        }\r\n\r\n        this.url = url;\r\n        this.key = key;\r\n        this.title = url;\r\n        this.streamUrl = null;\r\n    }\r\n\r\n    init(dj) {\r\n        this.key = dj.keys.soundcloud;\r\n    }\r\n\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n        return this.url + \" *via Soundcloud*\";\r\n    }\r\n\r\n    loadData() {\r\n        https.get('https://api.soundcloud.com/resolve?url=' + encodeURIComponent(this.url) +\r\n            '&client_id=' + encodeURIComponent(this.key), function(res) {\r\n            var loc = res.headers.location;\r\n            https.get(loc, function(ress) {\r\n                var result = '';\r\n                ress.on('data', function(chunk) {\r\n                    result += chunk;\r\n                });\r\n                ress.on('end', function() {\r\n                    var data = JSON.parse(result);\r\n                    this.loadResponse(data);\r\n                    this.emit('data-changed');\r\n                }.bind(this));\r\n            }.bind(this));\r\n        }.bind(this));\r\n    }\r\n\r\n    loadResponse(json) {\r\n        if(json['label_name'] != null && json['label_name'] != '') {\r\n            this.title = json['label_name'];\r\n        } else {\r\n            this.title = json['user']['username'];\r\n        }\r\n        if(json['title'].indexOf(this.tile + ' - ') != -1) {\r\n            this.title += json['title'];\r\n        } else {\r\n            this.title += \" - \" + json['title'];\r\n        }\r\n        this.streamUrl = json['stream_url'] + \"?client_id=\" + encodeURIComponent(this.key);\r\n        this.url = json['permalink_url'];\r\n    }\r\n\r\n    createStream() {\r\n        return new Promise(function(resolve, reject) {\r\n            if(this.streamUrl != null) {\r\n                this.loadStream(this.streamUrl, resolve);\r\n            } else {\r\n                this.once('data-changed', function() {\r\n                    this.loadStream(this.streamUrl, resolve);\r\n                }.bind(this));\r\n                this.loadData();\r\n            }\r\n        }.bind(this));\r\n    }\r\n\r\n    loadStream(url, callback) {\r\n        https.get(url, function(res) {\r\n            if(typeof res.headers.location != 'undefined' && res.headers.location != null) {\r\n                if(res.headers.location != url) {\r\n                    this.loadStream(res.headers.location, callback);\r\n                    return;\r\n                }\r\n            }\r\n            callback(res);\r\n        }.bind(this));\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = SoundcloudAudio;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/IcyAudio.js":"\"use strict\";\r\n\r\nvar icy = require('icy');\r\nvar Playable = require(\"../Logic/Playable.js\");\r\n\r\n// Used for Icecast and Shoutcast streams\r\nclass IcyAudio extends Playable {\r\n\r\n    constructor(url, user) {\r\n        super(user);\r\n        this.url = url;\r\n        this.title = \"\";\r\n        this.streamUrl = null;\r\n    }\r\n\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n        return this.streamUrl;\r\n    }\r\n\r\n    createStream() {\r\n        return new Promise(function(resolve, reject) {\r\n            icy.get(this.url, function(res) {\r\n                res.on('metadata', function(metadata) {\r\n                    var parsed = icy.parse(metadata);\r\n                    this.title = parsed.StreamTitle;\r\n                    this.streamUrl = parsed.StreamUrl;\r\n                    this.emit('data-changed');\r\n                }.bind(this));\r\n                resolve(res);\r\n            }.bind(this)).on('error', reject);\r\n        }.bind(this));\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = IcyAudio;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/FileAudio.js":"\"use strict\";\r\n\r\nvar fs = require('fs');\r\nvar Playable = require(\"../Logic/Playable.js\");\r\nvar Utils = require(\"../Logic/Utils.js\");\r\n\r\nclass FileAudio extends Playable {\r\n\r\n    constructor(file, user, title) {\r\n        super(user);\r\n        this.file = file;\r\n        this.title = title === undefined ? file : title;\r\n    }\r\n\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n\r\n    getFormat() {\r\n        return Utils.getExtension(this.file);\r\n    }\r\n\r\n    createStream() {\r\n        return new Promise(function(resolve, reject) {\r\n            fs.stat(this.file, function(err, stat) {\r\n                if(err != null) {\r\n                    reject(err);\r\n                } else if(!stat.isFile()) {\r\n                    reject(this.file + ' is not a file');\r\n                } else {\r\n                    resolve(fs.createReadStream(this.file));\r\n                }\r\n            }.bind(this));\r\n        }.bind(this));\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = FileAudio;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Logic/Playlist.js":"\"use strict\";\r\n\r\nvar EventEmitter = require('events').EventEmitter;\r\n\r\nclass Playlist extends EventEmitter {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    shuffle() {\r\n\r\n    }\r\n\r\n    hasNextSong() {\r\n        return false;\r\n    }\r\n\r\n    getNextSong() {\r\n        return null;\r\n    }\r\n\r\n    getLength() {\r\n        return 0;\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        var counter = array.length, temp, index;\r\n        while(counter > 0) {\r\n            index = Math.floor(Math.random() * counter);\r\n            counter--;\r\n            temp = array[counter];\r\n            array[counter] = array[index];\r\n            array[index] = temp;\r\n        }\r\n        return array;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Playlist;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Logic/Decoder.js":"\"use strict\";\r\n\r\nvar EventEmitter = require('events').EventEmitter;\r\n\r\nclass Decoder extends EventEmitter {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    canDecode(format) {\r\n        return false;\r\n    }\r\n\r\n    createDecoder(stream, options) {\r\n        return Promise.reject('Invalid decoder');\r\n    }\r\n\r\n    destroyDecoder() {\r\n\r\n    }\r\n\r\n    getPriority() {\r\n        return 1000;\r\n    }\r\n\r\n    getTitle() {\r\n\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Decoder;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/Decoders/FFmpegDecoder.js":"\"use strict\";\r\n\r\nvar Decoder = require('../../Logic/Decoder.js');\r\nvar child_process = require('child_process');\r\n\r\nclass FFmpegDecoder extends Decoder {\r\n\r\n    constructor(decoderCmd) {\r\n        super();\r\n        this.process = null;\r\n        this.stream = null;\r\n        this.decoderCmd = decoderCmd;\r\n        this.cmdCache = null;\r\n    }\r\n\r\n    canDecode(format) {\r\n        // The list is so big that returning true and setting a low priority is better and faster (stronger?)\r\n        return true;\r\n    }\r\n\r\n    getCommand() {\r\n        if(this.cmdCache != null) return this.cmdCache;\r\n\r\n        var cmds = [\"avconv\", \"ffmpeg\", \"avconv.exe\", \"ffmpeg.exe\"];\r\n        if(this.decoderCmd != null) {\r\n            cmds.unshift(this.decoderCmd);\r\n        } else {\r\n            cmds.unshift(process.cwd() + '/ffmpeg/ffmpeg');\r\n            cmds.unshift(process.cwd() + '/ffmpeg/ffmpeg.exe');\r\n        }\r\n\r\n        for(var i = 0; i < cmds.length; i++){\r\n            var p = child_process.spawnSync(cmds[i]);\r\n            if(!p.error) {\r\n                this.cmdCache = cmds[i];\r\n                return cmds[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    createDecoder(stream, options) {\r\n        var command = this.getCommand();\r\n        if(command == null) {\r\n            console.log('The decoder was not found.');\r\n            this.kill();\r\n            return null;\r\n        }\r\n        this.stream = stream;\r\n        this.process = child_process.spawn(command, [\r\n            \"-f\", \"s16le\",\r\n            \"-ar\", options.sampleRate,\r\n            \"-ac\", options.channels,\r\n            \"-af\", \"volume=1\",\r\n            \"pipe:1\",\r\n            \"-i\", \"-\"\r\n        ]);\r\n        stream.pipe(this.process.stdin);\r\n        return Promise.resolve(this.process.stdout);\r\n    }\r\n\r\n    destroyDecoder() {\r\n        try {\r\n            if(this.process != null) {\r\n                if(this.stream != null) {\r\n                    this.stream.unpipe(this.process.stdin);\r\n                }\r\n                this.process.stdin.pause();\r\n                this.process.kill('SIGKILL');\r\n                this.process = null;\r\n            }\r\n            this.stream = null;\r\n        } catch(e) {\r\n\r\n        }\r\n    }\r\n\r\n    getPriority() {\r\n        return 500;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = FFmpegDecoder;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/Decoders/ChiptuneDecoder.js":"\"use strict\";\r\n\r\nconst Decoder = require('../../Logic/Decoder.js');\r\nvar chiptune = null;\r\n\r\nconst formats = ['mod', 's3m', 'xm', 'it', 'mptm', 'stm', 'nst', 'm15', 'stk', 'wow', 'ult', '669', 'mtm',\r\n        'med', 'far', 'mdl', 'ams', 'dsm', 'amf', 'okt', 'dmf', 'ptm', 'psm', 'mt2', 'dbm', 'digi', 'imf',\r\n        'j2b', 'gdm', 'umx', 'plm', 'mo3', 'xpk', 'ppm', 'mmcmp'];\r\n\r\nclass ChiptuneDecoder extends Decoder {\r\n\r\n    constructor() {\r\n        super();\r\n        this.instance = null;\r\n    }\r\n\r\n\r\n    canDecode(format) {\r\n        return formats.indexOf(format) != -1;\r\n    }\r\n\r\n    createDecoder(stream, options) {\r\n        return new Promise(function(resolve, reject) {\r\n            if(chiptune == null) {\r\n                chiptune = require('node-chiptune'); // Only require when needed. Less memory usage.\r\n            }\r\n            this.instance = chiptune({\r\n                sampleRate: options.sampleRate,\r\n                channels: options.channels,\r\n                readSize: 2880\r\n            });\r\n            stream.pipe(this.instance);\r\n\r\n            this.instance.once('readable', function() {\r\n                resolve(this.instance);\r\n            }.bind(this));\r\n        }.bind(this));\r\n    }\r\n\r\n    destroyDecoder() {\r\n        this.instance.destroy();\r\n    }\r\n\r\n    getTitle() {\r\n        if(this.instance == null) return null;\r\n        var md = this.instance.metadata;\r\n        return md.title + ' - ' + md.artist;\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n        if(this.instance == null) return null;\r\n        return this.instance.metadata.message;\r\n    }\r\n\r\n    getPriority() {\r\n        return 50;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = ChiptuneDecoder;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/StreamAudio.js":"\"use strict\";\r\n\r\nvar http = require('http');\r\nvar https = require('https');\r\nvar url_parser = require('url');\r\nvar Playable = require(\"../Logic/Playable.js\");\r\n\r\n// Used for direct online audio files\r\nclass StreamAudio extends Playable {\r\n\r\n    constructor(url, user, title) {\r\n        super(user);\r\n        this.url = url;\r\n        this.title = title === undefined ? null : title;\r\n    }\r\n\r\n    loadData() {\r\n        if(typeof this.url == 'string') {\r\n            this.url = url_parser.parse(this.url);\r\n        }\r\n        if(this.title == null) {\r\n            this.title = this.url.href;\r\n            this.emit('data-changed');\r\n        }\r\n    }\r\n\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n        return null;\r\n    }\r\n\r\n    createStream() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.loadData();\r\n\r\n            if(this.url.protocol.length > 5 && this.url.protocol.substring(0, 5) == 'https') {\r\n                https.get(this.url, function(res) {\r\n                    resolve(res);\r\n                }).on('error', reject);\r\n            } else {\r\n                http.get(this.url, function(res) {\r\n                    resolve(res);\r\n                }).on('error', reject);\r\n            }\r\n        }.bind(this));\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = StreamAudio;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/Playlist/DirectoryPlaylist.js":"\"use strict\";\r\n\r\nvar fs = require('fs');\r\nvar path = require('path');\r\n\r\nvar Playlist = require('../../Logic/Playlist.js');\r\nvar FileAudio = require('../FileAudio.js');\r\n\r\n// Help me add other valid audio extensions here. Video extensions are valid too\r\nvar audioExt = ['mp3', 'aac', 'wav', 'ogg', 'aiff', 'mp4', 'avi', 'flv', 'wmv'];\r\n\r\n// Playlist that plays audio files from a directory\r\nclass DirectoryPlaylist extends Playlist {\r\n\r\n    constructor(folder) {\r\n        super();\r\n        this.lastIndex = -1;\r\n        this.songList = [];\r\n        var files = fs.readdirSync(folder);\r\n        for(var f in files) {\r\n            var filename = files[f];\r\n            if(audioExt.indexOf(filename.substring(filename.lastIndexOf('.') + 1)) == -1) {\r\n                continue;\r\n            }\r\n            this.songList.push(path.join(folder, filename));\r\n        }\r\n    }\r\n\r\n    shuffle() {\r\n        this.shuffleArray(this.songList);\r\n    }\r\n\r\n    getNextSong() {\r\n        if(this.songList.length == 0) return null;\r\n        this.lastIndex++;\r\n        if(this.lastIndex >= this.songList.length) {\r\n            this.lastIndex = 0;\r\n        }\r\n        return new FileAudio(this.songList[this.lastIndex]);\r\n    }\r\n\r\n    hasNextSong() {\r\n        return this.lastIndex < this.songList.length;\r\n    }\r\n\r\n    getLength() {\r\n        return this.songList.length;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = DirectoryPlaylist;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/Playlist/FilePlaylist.js":"\"use strict\";\r\n\r\nvar url = require('url');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\n\r\nvar Utils = require('../../Logic/Utils.js');\r\nvar Playlist = require('../../Logic/Playlist.js');\r\nvar FileAudio = require('../FileAudio.js');\r\nvar IcyAudio = require('../IcyAudio.js');\r\n\r\nclass FilePlaylist extends Playlist {\r\n\r\n    constructor(filePath) {\r\n        super();\r\n        var data = fs.readFileSync(filePath).toString();\r\n        var dir = path.dirname(filePath);\r\n        var lines = data.trim().split(\"\\n\");\r\n        if(lines.length == 0) {\r\n            throw new Error('Empty playlist file');\r\n        } else if(startsWith(lines[0], '[playlist]')) {\r\n            this.list = readPLS(lines, dir);\r\n        } else if(startsWith(lines[0], '#EXTM3U')) {\r\n            this.list = readM3U(lines, dir);\r\n        } else {\r\n            this.list = readM3U(lines, dir);\r\n            //throw new Error('Invalid playlist format. Only PLS and M3U are accepted');\r\n        }\r\n        this.lastIndex = -1;\r\n    }\r\n\r\n    shuffle() {\r\n        this.shuffleArray(this.list);\r\n    }\r\n\r\n    getNextSong() {\r\n        if(this.list.length == 0) return null;\r\n        this.lastIndex++;\r\n        if(this.lastIndex >= this.list.length) this.lastIndex = 0;\r\n        return this.list[this.lastIndex];\r\n    }\r\n\r\n    hasNextSong() {\r\n        return this.lastIndex < this.list.length;\r\n    }\r\n\r\n    getLength() {\r\n        return this.list.length;\r\n    }\r\n\r\n}\r\n\r\nfunction startsWith(str, needle) {\r\n    return str.length >= needle.length && str.substring(0, needle.length) == needle;\r\n}\r\n\r\nfunction createPlayable(path, title, length) {\r\n    var parsed = url.parse(path);\r\n    if(parsed.protocol == null || startsWith(parsed.protocol, 'file')) {\r\n        return new FileAudio(path, title);\r\n    } else if((startsWith(parsed.protocol, 'http') || startsWith(parsed.protocol, 'https')) && length == -1) {\r\n        return new IcyAudio(path);\r\n    } else {\r\n        return new FileAudio(path, title);\r\n    }\r\n}\r\n\r\nfunction readPLS(lines, dir) {\r\n    var data = {\r\n        version: -1,\r\n        numberofentries: 0\r\n    };\r\n    lines.forEach(function(line) {\r\n        if(line.length == 0) return;\r\n        var l = line.split('=');\r\n        if(l.length < 2) return;\r\n        data[l[0].toLowerCase()] = l[1];\r\n    });\r\n    if(data['version'] != 2) {\r\n        throw new Error('Unsupported playlist version');\r\n    } else if(data['numberofentries'] <= 0) {\r\n        throw new Error('Empty playlist');\r\n    }\r\n\r\n    var list = [];\r\n\r\n    for(var i = 1; i <= data['numberofentries']; i++) {\r\n        if(!Utils.exists(data['file' + i])) continue;\r\n        var length = data['length' + i] === undefined ? -1 : data['length' + i];\r\n        list.push(createPlayable(path.join(dir, data['file' + i]), data['title' + i], length));\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\nfunction readM3U(lines, dir) {\r\n    var list = [];\r\n    var title = null, length = -1;\r\n    lines.forEach(function(line) {\r\n        if(line.length == 0) return;\r\n        if(startsWith(line, '#EXTINF:')) {\r\n            var l = line.replace('#EXTINF:', '').split(',');\r\n            length = parseInt(l[0]);\r\n            title = l[1];\r\n        } else if(startsWith(line, '#')) {\r\n            // Ignore, it's a comment\r\n        } else {\r\n            if(!path.isAbsolute(line)) line = path.join(dir, line);\r\n            if(title != null) {\r\n                list.push(createPlayable(line, title, length));\r\n            } else {\r\n                list.push(createPlayable(line, undefined, length));\r\n            }\r\n        }\r\n    });\r\n\r\n    return list;\r\n}\r\n\r\nmodule.exports = FilePlaylist;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/Playlist/SoundcloudPlaylist.js":"\"use strict\";\r\n\r\nvar https = require('https');\r\n\r\nvar Playlist = require('../../Logic/Playlist.js');\r\nvar SoundcloudAudio = require('../SoundcloudAudio.js');\r\nvar Utils = require('../../Logic/Utils.js');\r\n\r\nvar errors = {\r\n    400: 'Bad Request',\r\n    401: 'Unauthorized',\r\n    403: 'Forbidden',\r\n    404: 'Not Found',\r\n    406: 'Not Accessible',\r\n    422: 'Unprocessable Entity',\r\n    429: 'Too Many Requests',\r\n    500: 'Internal Server Error',\r\n    503: 'Service Unavailable',\r\n    504: 'Gateway Timeout'\r\n};\r\n\r\nclass SoundcloudPlaylist extends Playlist {\r\n\r\n    constructor(url, key) {\r\n        super();\r\n\r\n        if(!Utils.SCPlaylistRegex.test(url)) {\r\n            throw new Error(\"Invalid Playlist URL\");\r\n        }\r\n\r\n        this.tracks = [];\r\n        this.lastIndex = -1;\r\n\r\n        https.get('https://api.soundcloud.com/resolve?url=' + encodeURIComponent(url) +\r\n            '&client_id=' + encodeURIComponent(key), function(res) {\r\n            var loc = res.headers.location;\r\n            https.get(loc, function(ress) {\r\n                if(typeof errors[res.statusCode] != 'undefined') {\r\n                    this.emit('error', new Error(errors[res.statusCode], res.statusCode));\r\n                    return;\r\n                }\r\n                var result = '';\r\n                ress.on('data', function(chunk) {\r\n                    result += chunk;\r\n                });\r\n                ress.on('end', function() {\r\n                    var data = JSON.parse(result);\r\n                    data.tracks.forEach(function(track) {\r\n                        var sc = new SoundcloudAudio(track.permalink_url, key);\r\n                        sc.loadResponse(track);\r\n                        this.tracks.push(sc);\r\n                    }.bind(this));\r\n                    this.emit('update');\r\n                }.bind(this));\r\n            }.bind(this));\r\n        }.bind(this));\r\n    }\r\n\r\n    shuffle() {\r\n        this.shuffleArray(this.tracks);\r\n    }\r\n\r\n    getNextSong() {\r\n        if(this.tracks.length == 0) return null;\r\n        this.lastIndex++;\r\n        if(this.lastIndex >= this.tracks.length) {\r\n            this.lastIndex = 0;\r\n        }\r\n        return this.tracks[this.lastIndex];\r\n    }\r\n\r\n    hasNextSong() {\r\n        return this.lastIndex < this.tracks.length;\r\n    }\r\n\r\n    getLength() {\r\n        return this.tracks.length;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = SoundcloudPlaylist;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Audio/Playlist/YoutubePlaylist.js":"\"use strict\";\r\n\r\nvar https = require('https');\r\n\r\nvar Playlist = require('../../Logic/Playlist.js');\r\nvar YoutubeVideo = require('../YoutubeVideo.js');\r\nvar Utils = require('../../Logic/Utils.js');\r\n\r\nclass YoutubePlaylist extends Playlist {\r\n\r\n    constructor(url, key) {\r\n        super();\r\n        this.lastIndex = -1;\r\n        this.key = key;\r\n        this.id = Utils.YTPlaylistRegex.exec(url);\r\n        if(this.id == null) throw new Error(\"Invalid Playlist URL\");\r\n        this.id = this.id[1];\r\n        this.videos = [];\r\n        this.loadPage(null);\r\n    }\r\n\r\n    loadPage(token) {\r\n        var url = 'https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=50';\r\n        url += '&playlistId=' + this.id + '&key=' + this.key;\r\n        if(token != null) url += '&pageToken=' + token;\r\n        https.get(url, function(res) {\r\n            var body = '';\r\n            res.on('data', function(d) {\r\n                body += d;\r\n            });\r\n            res.on('end', function() {\r\n                var parsed = JSON.parse(body);\r\n                if(typeof parsed.error != 'undefined') {\r\n                    this.emit('error', new Error(parsed.error.message));\r\n                    return;\r\n                }\r\n                parsed.items.forEach(function(item) {\r\n                    this.videos.push(item.contentDetails.videoId);\r\n                }.bind(this));\r\n                this.emit('update');\r\n                if(typeof parsed.nextPageToken == 'string') {\r\n                    this.loadPage(parsed.nextPageToken);\r\n                }\r\n            }.bind(this));\r\n        }.bind(this)).on('error', function(error) {\r\n            this.emit('error', error);\r\n        });\r\n    }\r\n\r\n    shuffle() {\r\n        this.shuffleArray(this.videos);\r\n    }\r\n\r\n    getNextSong() {\r\n        if(this.videos.length == 0) return null;\r\n        this.lastIndex++;\r\n        if(this.lastIndex >= this.videos.length) {\r\n            this.lastIndex = 0;\r\n        }\r\n        return new YoutubeVideo('http://www.youtube.com/watch?v=' + this.videos[this.lastIndex]);\r\n    }\r\n\r\n    hasNextSong() {\r\n        return this.lastIndex < this.videos.length;\r\n    }\r\n\r\n    getLength() {\r\n        return this.videos.length;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = YoutubePlaylist;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Bot/BotDJ.js":"\"use strict\";\r\n/*\r\n * This is the default bot implementation of DiscordDJ\r\n */\r\n\r\nvar DJ = require('../Logic/DJ.js');\r\nvar Rating = require('./Rating.js');\r\nvar InfoHandler = require('./InfoHandler.js');\r\n\r\nclass BotDJ extends DJ {\r\n\r\n    constructor(bot, voiceConnection, handler, keys) {\r\n        super(bot, voiceConnection, handler, keys);\r\n        this._mode = null;\r\n        this.rating = null;\r\n        this.info = null;\r\n\r\n        this.on('skip', function() {\r\n            if(this.rating != null) this.rating.resetRating();\r\n            if(this.mode != null) this.mode.onSkip();\r\n        }.bind(this));\r\n    }\r\n\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n\r\n    set mode(mode) {\r\n        if(this._mode != null) this._mode.destroy();\r\n        this._mode = mode;\r\n        if(mode != null) mode.init(this);\r\n    }\r\n\r\n    enableRating(options) {\r\n        this.rating = new Rating(this.bot, this, options);\r\n    }\r\n\r\n    disableRating() {\r\n        if(this.rating != null) this.rating.destroy();\r\n        this.rating = null;\r\n    }\r\n\r\n    enableInfo(options) {\r\n        this.info = new InfoHandler(this, this.handler, options);\r\n    }\r\n\r\n    disableInfo() {\r\n        if(this.info != null) this.info.destroy();\r\n        this.info = null;\r\n    }\r\n\r\n    destroy() {\r\n        if(this.info != null) this.info.destroy();\r\n        if(this.rating != null) this.rating.destroy();\r\n        if(this.mode != null) this.mode.destroy();\r\n    }\r\n\r\n    addToQueue(playable) {\r\n        var p = this.mode != null ? this.mode.addToQueue(playable) : playable;\r\n        if(p != null) super.addToQueue(p);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = BotDJ;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Bot/Rating.js":"\"use strict\";\r\n\r\nvar Utils = require('../Logic/Utils.js');\r\nvar Discordie = require('discordie');\r\n\r\nvar likeCmd = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(!Utils.exists(dj.rating)) return;\r\n    dj.rating.like(user);\r\n};\r\n\r\nvar dislikeCmd = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(!Utils.exists(dj.rating)) return;\r\n    dj.rating.dislike(user);\r\n};\r\n\r\nclass Rating {\r\n\r\n    constructor(bot, dj, options) {\r\n        this.bot = bot;\r\n        this.dj = dj;\r\n        this.ratings = {};\r\n        this.likes = 0;\r\n        this.dislikes = 0;\r\n        this.minVotes = options.minVotes;\r\n        this.minDislikes = options.minDislikes; // Percentage\r\n\r\n        this.userUpdate = function(update) {\r\n            if(update.member.status == Discordie.StatusTypes.OFFLINE) {\r\n                this.setRating(update.member, null);\r\n            }\r\n        }.bind(this);\r\n        this.bot.Dispatcher.on(Discordie.Events.PRESENCE_UPDATE, this.userUpdate);\r\n\r\n        dj.handler.registerCommand('like', ['like', 'woot', '+1'], likeCmd, null);\r\n        dj.handler.registerCommand('dislike', ['dislike', 'meh', '-1'], dislikeCmd, null);\r\n    }\r\n\r\n    destroy() {\r\n        this.bot.Dispatcher.removeListener(Discordie.Events.PRESENCE_UPDATE, this.userUpdate);\r\n\r\n        this.dj.handler.deregisterCommand('like');\r\n        this.dj.handler.deregisterCommand('dislike');\r\n    }\r\n\r\n    like(user) {\r\n        this.setRating(user, true);\r\n    }\r\n\r\n    dislike(user) {\r\n        this.setRating(user, false);\r\n    }\r\n\r\n    setRating(user, rating) {\r\n        if(rating == null) {\r\n            delete this.ratings[user.id];\r\n        } else {\r\n            this.ratings[user.id] = rating;\r\n        }\r\n        this.recalculateRating();\r\n    }\r\n\r\n    resetRating() {\r\n        this.ratings = {};\r\n        this.likes = 0;\r\n        this.dislikes = 0;\r\n    }\r\n\r\n    recalculateRating() {\r\n        var likes = 0, dislikes = 0;\r\n        for(var user in this.ratings) {\r\n            if(typeof this.ratings[user] == 'undefined') continue;\r\n            if(this.ratings[user]) {\r\n                likes++;\r\n            } else {\r\n                dislikes++;\r\n            }\r\n        }\r\n        this.likes = likes;\r\n        this.dislikes = dislikes;\r\n        this.dj.emit('info-update');\r\n\r\n        var votes = likes + dislikes;\r\n        if(votes >= this.minVotes) {\r\n            var dp = (dislikes / votes) * 100;\r\n            if(dp >= this.minDislikes) {\r\n                this.dj.skip();\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Rating;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Bot/InfoHandler.js":"\"use strict\";\r\n\r\nvar IcyAudio = require('../Audio/IcyAudio.js');\r\n\r\nclass InfoHandler {\r\n\r\n    constructor(dj, handler, options) {\r\n        this.dj = dj;\r\n        this.handler = handler;\r\n        this.nowPlayingPrefix = options.nowPlayingPrefix || '**Now Playing:** ';\r\n        this.songHistory = {\r\n            channel: options.songHistoryChannel,\r\n            lastMessage: null,\r\n            lastMessageObj: null\r\n        };\r\n        this.infoMessage = {\r\n            channel: options.infoChannel,\r\n            lastMessage: null,\r\n            lastMessageObj: null\r\n        };\r\n\r\n        // Events\r\n\r\n        this.onDataChanged = function() {\r\n            this.updateSongHistory(this.dj.nowPlaying instanceof IcyAudio);\r\n            this.updateInfoMessage();\r\n        }.bind(this);\r\n\r\n        this.onPlay = function() {\r\n            this.dj.nowPlaying.on('data-changed', this.onDataChanged);\r\n            this.dj.nowPlaying.loadData();\r\n\r\n            this.updateSongHistory(true);\r\n            this.updateInfoMessage();\r\n        }.bind(this);\r\n\r\n        this.onSkip = function() {\r\n            if(this.dj.nowPlaying == null) {\r\n                this.updateSongHistory(false);\r\n                this.updateInfoMessage();\r\n            }\r\n        }.bind(this);\r\n\r\n        this.onInfoUpdate = function() {\r\n            this.updateInfoMessage();\r\n        }.bind(this);\r\n\r\n        this.dj.on('play', this.onPlay);\r\n        this.dj.on('skip', this.onSkip);\r\n        this.dj.on('info-update', this.onInfoUpdate);\r\n    }\r\n\r\n    destroy() {\r\n        this.dj.removeListener('play', this.onPlay);\r\n        this.dj.removeListener('skip', this.onSkip);\r\n        if(this.dj.nowPlaying != null) {\r\n            this.dj.nowPlaying.removeListener('data-changed', this.onDataChanged);\r\n        }\r\n\r\n        if(this.songHistory.lastMessageObj != null) {\r\n            this.handler.deleteMessage(this.songHistory.lastMessageObj);\r\n        }\r\n        if(this.infoMessage.lastMessageObj != null) {\r\n            this.handler.deleteMessage(this.infoMessage.lastMessageObj);\r\n        }\r\n    }\r\n\r\n    updateSongHistory(create) {\r\n        if(this.songHistory.channel == null) return;\r\n\r\n        var msg = this.createSongHistoryMessage();\r\n        if(this.songHistory.lastMessage != msg) {\r\n            if(msg == null) {\r\n                if(this.songHistory.lastMessage == null) return;\r\n                msg = this.songHistory.lastMessage;\r\n            }\r\n\r\n            if(create) {\r\n                if(this.songHistory.lastMessageObj != null) {\r\n                    this.handler.updateMessage(this.songHistory.lastMessageObj, this.songHistory.lastMessage); // Remove prefix\r\n                }\r\n                if(msg != null) {\r\n                    this.handler.sendMessage(this.songHistory.channel, this.nowPlayingPrefix + \"\\n\" + msg).then(function(obj, error) {\r\n                        if(error == null) this.songHistory.lastMessageObj = obj;\r\n                    }.bind(this));\r\n                }\r\n            } else {\r\n                if(this.songHistory.lastMessageObj != null) {\r\n                    this.handler.updateMessage(this.songHistory.lastMessageObj,\r\n                        (this.dj.playing != null ? this.nowPlayingPrefix + \"\\n\" : '') + msg);\r\n                }\r\n            }\r\n\r\n            this.songHistory.lastMessage = msg;\r\n        }\r\n    }\r\n\r\n    createSongHistoryMessage() {\r\n        if(this.dj.playable == null) return null;\r\n        var additional = this.dj.playable.getAdditionalInfo();\r\n        return this.dj.playable.getTitle() +\r\n            (this.dj.playable.user != null ? \"\\nDJ: \" + this.handler.mention(this.dj.playable.user) : \"\") +\r\n            (additional != null ? \"\\n\" + additional : \"\");\r\n    }\r\n\r\n\r\n    updateInfoMessage() {\r\n        if(this.infoMessage.channel == null) return;\r\n\r\n        var msg = this.createInfoMessage();\r\n        if(this.infoMessage.lastMessage != msg) {\r\n\r\n            if(this.infoMessage.lastMessageObj == null) {\r\n                this.handler.sendMessage(this.infoMessage.channel, msg).then(function(obj, error) {\r\n                    if(error == null) this.infoMessage.lastMessageObj = obj;\r\n                }.bind(this));\r\n            } else {\r\n                this.handler.updateMessage(this.infoMessage.lastMessageObj, msg);\r\n            }\r\n            this.infoMessage.lastMessage = msg;\r\n\r\n        }\r\n    }\r\n\r\n    createInfoMessage() {\r\n        var msg = \"\";\r\n\r\n        if(this.dj.nowPlaying != null) {\r\n            msg += this.nowPlayingPrefix + \"\\n\";\r\n            msg += this.dj.nowPlaying.getTitle() + \"\\n\";\r\n\r\n            var additional = this.dj.nowPlaying.getAdditionalInfo();\r\n            if(additional != null) msg += additional + \"\\n\";\r\n\r\n            if(this.dj.nowPlaying.user != null) {\r\n                msg += \"DJ: \" + this.handler.mention(this.dj.nowPlaying.user) + \"\\n\";\r\n            }\r\n            msg += \"\\n\";\r\n            if(this.dj.rating != null) {\r\n                msg += \"**\" + this.dj.rating.likes + \"** likes :black_small_square:\";\r\n                msg += \"**\" + this.dj.rating.dislikes + \"** dislikes\\n\";\r\n                msg += \"\\n\";\r\n            }\r\n        } else {\r\n            msg += \"\";\r\n        }\r\n\r\n        var modeInfo = this.dj.mode != null ? this.dj.mode.getAdditionalInfo() : null;\r\n        if(modeInfo != null) {\r\n            msg += modeInfo;\r\n        }\r\n\r\n        return msg;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = InfoHandler;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Bot/Mode.js":"\"use strict\";\r\n\r\nclass Mode {\r\n\r\n    constructor() {\r\n        this.bot = null;\r\n        this.commands = null;\r\n    }\r\n\r\n    init(bot) {\r\n        this.bot = bot;\r\n    }\r\n\r\n    addToQueue(playable) {\r\n        return playable;\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n        return null;\r\n    }\r\n\r\n    onSkip() {\r\n\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Mode;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Bot/DJMode.js":"\"use strict\";\r\n\r\nvar Mode = require('./Mode.js');\r\nvar Utils = require('../Logic/Utils.js');\r\nvar WaitList = require('./WaitList.js');\r\n\r\nvar joinCmd = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(!Utils.exists(dj.mode)) return;\r\n    if(!Utils.exists(dj.mode.waitlist)) return;\r\n\r\n    var r = dj.mode.waitlist.push(user);\r\n    if(r == -1) {\r\n        handler.sendPrivateMessage(user, \"You already are in the wait list.\");\r\n    } else if(r == -2) {\r\n        handler.sendPrivateMessage(user, \"The wait list is full.\");\r\n    } else {\r\n        handler.sendPrivateMessage(user, \"You joined the wait list! Use `song [url]` to set your song\");\r\n    }\r\n};\r\n\r\nclass DJMode extends Mode {\r\n\r\n    constructor(opt) {\r\n        super();\r\n        this.opt = opt;\r\n        this.waitlist = null;\r\n    }\r\n\r\n    init(dj) {\r\n        super.init(dj);\r\n        this.waitlist = new WaitList(dj.bot, dj, dj.handler, this.opt['limit'] || 50, this.opt['dj-role'], this.opt['list-role']);\r\n\r\n        dj.handler.registerCommand('join', ['join', 'join-waitlist', 'join-wl'], joinCmd, null);\r\n\r\n        dj.handler.setCommandPermission('add', null);\r\n        dj.handler.setCommandPermission('youtube', null);\r\n        dj.handler.setCommandPermission('soundcloud', null);\r\n        dj.handler.setCommandPermission('raw-pm', null);\r\n    }\r\n\r\n    addToQueue(playable) {\r\n        if(this.waitlist == null) return playable;\r\n        if(playable == null) return null;\r\n        if(playable.user == null) return playable;\r\n        if(this.bot.playable != null && this.bot.playable.user == playable.user) {\r\n            this.bot.handler.sendPrivateMessage(playable.user, \"You are the DJ, you can't change your track now\");\r\n            return null;\r\n        }\r\n        var r = this.waitlist.push(playable.user, playable, false);\r\n        if(r == -2) {\r\n            this.bot.handler.sendPrivateMessage(playable.user, \"The wait list is full\");\r\n            return null;\r\n        } else if(r == -1) {\r\n            this.waitlist.setPlayable(playable.user, playable);\r\n            this.bot.handler.sendPrivateMessage(playable.user, \"Your song was successfully changed\");\r\n        } else if(r == -3) {\r\n            this.bot.handler.sendPrivateMessage(playable.user, \"The wait list is locked\");\r\n        } else {\r\n            this.bot.handler.sendPrivateMessage(playable.user, \"You were added to the wait list and your track was set\");\r\n        }\r\n        if(this.bot.playable == null) {\r\n            this.waitlist.processDJList();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getAdditionalInfo() {\r\n        var msg = \"\";\r\n        var waitlistNotEmpty = this.waitlist.length > 0;\r\n        if(waitlistNotEmpty) msg += \"**Wait List**\\n\";\r\n        var i = 1;\r\n        this.waitlist.forEach(function(entry) {\r\n            msg += i + \". \" + entry.user.mention() + \"\\n\";\r\n            i++;\r\n        });\r\n        if(waitlistNotEmpty) msg += \"\\n\";\r\n        if(this.waitlist.isFull()) {\r\n            msg += \"**The Wait List is full**\";\r\n        } else {\r\n            msg += \"Join the Wait List with `add [youtube video url]`\";\r\n        }\r\n        return msg;\r\n    }\r\n\r\n    onSkip() {\r\n        this.waitlist.processDJList();\r\n    }\r\n\r\n    destroy() {\r\n        this.waitlist.destroy();\r\n    }\r\n}\r\n\r\nmodule.exports = DJMode;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Bot/WaitList.js":"\"use strict\";\r\n\r\nvar Discordie = require('discordie');\r\n\r\nclass WaitList extends Array {\r\n\r\n    constructor(bot, botDj, handler, limit, djRole, listRole) {\r\n        super();\r\n\r\n        this.bot = bot;\r\n        this.botDj = botDj;\r\n        this.handler = handler;\r\n        this.limit = limit;\r\n        this.locked = false;\r\n        this.cycle = false;\r\n        this.dj = null;\r\n        this.djRole = djRole;\r\n        this.listRole = listRole;\r\n\r\n        this.userUpdate = function(presence) {\r\n            if(presence.member.status == Discordie.StatusTypes.OFFLINE) {\r\n                this.removeUser(presence.member);\r\n            }\r\n        }.bind(this);\r\n        this.bot.Dispatcher.on(Discordie.Events.PRESENCE_UPDATE, this.userUpdate);\r\n    }\r\n\r\n    destroy() {\r\n        this.bot.Dispatcher.removeListener(Discordie.Events.PRESENCE_UPDATE, this.userUpdate);\r\n\r\n        for(var i = 0; i < this.length; i++) {\r\n            this.handler.removeRole(this[i].user, this.listRole);\r\n        }\r\n        if(this.dj != null) this.handler.removeRole(this.dj.user, this.djRole);\r\n        this.dj = null;\r\n        this.splice(0, this.length);\r\n    }\r\n\r\n    processDJList() {\r\n        if(this.length == 0) {\r\n            this.removeDJ();\r\n            return;\r\n        }\r\n        var dj = this[0];\r\n        for(var i = 0; i < this.length; i++) {\r\n            if(dj.music != null) break;\r\n            super.push(super.shift());\r\n            dj = this[0];\r\n        }\r\n        if(dj.music == null) {\r\n            this.removeDJ();\r\n            return;\r\n        }\r\n        dj = this.shift();\r\n        this.botDj.play(dj.music);\r\n    }\r\n\r\n    removeDJ() {\r\n        if(this.dj != null) {\r\n            this.handler.removeRole(this.dj.user, this.djRole);\r\n            this.handler.removeRole(this.dj.user, this.listRole);\r\n            if(this.cycle) {\r\n                this.push(this.dj.user);\r\n            }\r\n            this.dj = null;\r\n        }\r\n    }\r\n\r\n    isFull() {\r\n        return this.length >= this.limit;\r\n    }\r\n\r\n    getCurrentDJ() {\r\n        return this.dj.user;\r\n    }\r\n\r\n    shift() {\r\n        this.removeDJ();\r\n        if(this.length > 0) {\r\n            this.dj = super.shift();\r\n            this.handler.addRole(this.dj.user, this.djRole);\r\n            this.handler.removeRole(this.dj.user, this.listRole);\r\n        } else {\r\n            this.dj = null;\r\n        }\r\n        return this.dj;\r\n    }\r\n\r\n    getPlayable(user) {\r\n        for(var i = 0; i < this.length; i++) {\r\n            if(this[i].user.id == user.id) return this[i].music;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setPlayable(user, playable) {\r\n        for(var i = 0; i < this.length; i++) {\r\n            if(this[i].user.id == user.id) {\r\n                this[i].music = playable;\r\n                break;\r\n            }\r\n        }\r\n        if(this.botDj.nowPlaying == null) {\r\n            this.processDJList();\r\n        }\r\n    }\r\n\r\n    splice(start, deleteCount, items) {\r\n        var removed = super.splice(start, deleteCount, items);\r\n        for(var i = 0; i < removed.length; i++) {\r\n            this.handler.removeRole(removed[i].user, this.listRole);\r\n        }\r\n    }\r\n\r\n    removeUser(user) {\r\n        for(var i = 0; i < this.length; i++) {\r\n            if(this[i].user.id == user.id) {\r\n                super.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.handler.removeRole(user, this.listRole);\r\n    }\r\n\r\n    push(user, playable, force) {\r\n        if(this.dj != null && this.dj.user.id == user.id) return -1;\r\n        for(var i = 0; i < this.length; i++) {\r\n            if(this[i].user.id == user.id) return -1;\r\n        }\r\n\r\n        if(this.isFull() && !force) return -2;\r\n        if(this.locked && !force) return -3;\r\n\r\n        if(!user.guild) {\r\n            user = this.botDj.voiceConnection.guild.members.find(m => m.id == user.id);\r\n        }\r\n\r\n        if(this.length == 0 && this.dj == null && typeof playable != 'undefined') {\r\n            super.push({\r\n                user: user,\r\n                music: playable\r\n            });\r\n            this.processDJList();\r\n            return 0;\r\n        }\r\n\r\n        this.handler.addRole(user, this.listRole);\r\n\r\n        var r = super.push({\r\n            user: user,\r\n            music: typeof playable == 'undefined' ? null : playable\r\n        });\r\n        this.botDj.emit('info-update');\r\n        return r;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = WaitList;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/lib/Bot/PlaylistMode.js":"\"use strict\";\r\n\r\nvar Mode = require('./Mode.js');\r\nvar Utils = require('../Logic/Utils.js');\r\nvar fs = require('fs');\r\n\r\nvar DirectoryPlaylist = require('../Audio/Playlist/DirectoryPlaylist.js');\r\nvar FilePlaylist = require('../Audio/Playlist/FilePlaylist.js');\r\nvar SoundcloudPlaylist = require('../Audio/Playlist/SoundcloudPlaylist.js');\r\nvar YoutubePlaylist = require('../Audio/Playlist/YoutubePlaylist.js');\r\n\r\nfunction createPlaylist(pl, dj) {\r\n    if(Utils.YTPlaylistRegex.test(pl)) {\r\n        return new YoutubePlaylist(pl, dj.keys.youtube);\r\n    } else if(Utils.SCPlaylistRegex.test(pl)) {\r\n        return new SoundcloudPlaylist(pl, dj.keys.soundcloud);\r\n    } else {\r\n        try {\r\n            var stat = fs.statSync(pl);\r\n            if(stat.isFile()) {\r\n                return new FilePlaylist(pl);\r\n            } else {\r\n                return new DirectoryPlaylist(pl);\r\n            }\r\n        } catch(e) {\r\n            return null;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nvar playlistCmd = function(handler, obj, user, dj, args) {\r\n    if(dj == null) return;\r\n    if(!Utils.exists(dj.mode)) return;\r\n    if(args.length < 2) {\r\n        handler.sendPrivateMessage(user, '/' + args[0] + ' `playlist url/path`');\r\n        return;\r\n    }\r\n    args.shift(); // Remove first element: the command\r\n    var pl = args.join(' ');\r\n\r\n    var playlist = createPlaylist(pl, dj);\r\n\r\n    if(playlist == null) {\r\n        handler.sendPrivateMessage(user, 'Invalid Playlist');\r\n    } else {\r\n        dj.mode.addPlaylist(playlist);\r\n        handler.sendPrivateMessage(user, 'Your playlist was added to the queue');\r\n    }\r\n};\r\n\r\nclass PlaylistMode extends Mode {\r\n\r\n    constructor(playlist) {\r\n        super();\r\n        this._playlist = null;\r\n        this.playlists = [];\r\n        if(playlist instanceof Array) {\r\n            this.playlists = playlist;\r\n            if(this.playlists.length > 0) {\r\n                this._playlist = this.playlists.shift();\r\n            }\r\n        } else if(typeof playlist != 'undefined') {\r\n            this._playlist = playlist;\r\n        }\r\n    }\r\n\r\n    init(bot) {\r\n        super.init(bot);\r\n\r\n        bot.handler.registerCommand('playlist', ['playlist', 'pl'], playlistCmd, bot.handler.permissions.VOICE_MUTE);\r\n\r\n        if(this.playlist != null) {\r\n            bot.play(this.playlist.getNextSong());\r\n        }\r\n    }\r\n\r\n    onSkip() {\r\n        try {\r\n            if(this.playlist != null) {\r\n                if(this.playlists.length > 0 && (this.playlist.getLength() <= 0 || !this.playlist.hasNextSong())) {\r\n                    var newPlaylist = this.playlists.shift();\r\n                    this.playlists.push(this.playlist);\r\n                    this.playlist = newPlaylist;\r\n                } else {\r\n                    var song = this.playlist.getNextSong();\r\n                    if(song != null) this.bot.play(song);\r\n                }\r\n            }\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    addPlaylist(playlist) {\r\n        if(this.playlist == null) {\r\n            this.playlist = playlist;\r\n        } else if(this.playlist.getLength() <= 0) {\r\n            this.playlists.push(this.playlist);\r\n            this.playlist = playlist;\r\n        } else {\r\n            this.playlists.push(playlist);\r\n        }\r\n\r\n        //TODO remove\r\n        playlist.on('error', function(err) {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    get playlist() {\r\n        return this._playlist;\r\n    }\r\n\r\n    set playlist(playlist) {\r\n        if(typeof playlist == 'string') {\r\n            playlist = createPlaylist(playlist, this.bot);\r\n        }\r\n        this._playlist = playlist;\r\n        if(this.bot.playable == null && playlist != null) {\r\n            if(playlist.getLength() <= 0) {\r\n                playlist.once('update', function() {\r\n                    if(playlist != this.playlist) return;\r\n                    var next = playlist.getNextSong();\r\n                    if(next != null) this.bot.play(next);\r\n                }.bind(this));\r\n            } else {\r\n                var next = playlist.getNextSong();\r\n                if(next != null) this.bot.play(next);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = PlaylistMode;","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/runtime/DiscordDJ.js":"var Utils = require('../lib/Logic/Utils.js');\r\nvar DiscordDJ = require('../lib/index.js');\r\n\r\nvar Special = require('./Special.js');\r\n\r\nvar Discordie = require('discordie');\r\nvar fs = require('fs');\r\n\r\nif(Discordie == null) {\r\n    console.log('DiscordDJ is not installed correctly.');\r\n    console.log('Please, install it using \"setup-bot.bat\" or \"setup-bot.sh\"');\r\n    console.log('http://guichaguri.github.io/DiscordDJ/');\r\n    process.exit(0);\r\n}\r\nvar config;\r\ntry {\r\n    config = JSON.parse(fs.readFileSync('config.json', 'utf8'));\r\n} catch(e) {\r\n    config = null;\r\n}\r\nvar configModified = false;\r\nvar connected = false;\r\n\r\nvar bot = new Discordie();\r\nvar manager = null;\r\n\r\nfunction install(shouldLogin, callback) {\r\n    require('./Installer.js')(bot, config, shouldLogin, callback);\r\n    configModified = true;\r\n}\r\n\r\nfunction initDecoders() {\r\n    if(!Utils.exists(config['decoder-path'])) {\r\n        Utils.registerDecoder(new DiscordDJ.FFmpegDecoder(null));\r\n    } else {\r\n        Utils.registerDecoder(new DiscordDJ.FFmpegDecoder(config['decoder-path']));\r\n    }\r\n    Utils.registerDecoder(new DiscordDJ.ChiptuneDecoder());\r\n}\r\n\r\nfunction connect() {\r\n    var credentials = {}, hasCredentials = false;\r\n\r\n    if(Utils.exists(config['token'])) {\r\n        credentials['token'] = config['token'];\r\n        hasCredentials = true;\r\n    }\r\n    if(Utils.exists(config['email']) && Utils.exists(config['password'])) {\r\n        credentials['email'] = config['email'];\r\n        credentials['password'] = config['password'];\r\n        hasCredentials = true;\r\n    }\r\n\r\n    if(!hasCredentials) return install(true, finishInstallation);\r\n\r\n    bot.Dispatcher.removeListener(Discordie.Events.GATEWAY_READY, handleConnection);\r\n    bot.Dispatcher.removeListener(Discordie.Events.DISCONNECTED, handleDisconnection);\r\n    bot.Dispatcher.once(Discordie.Events.GATEWAY_READY, handleConnection);\r\n    bot.Dispatcher.once(Discordie.Events.DISCONNECTED, handleDisconnection);\r\n\r\n    console.log('Trying to connect...');\r\n    bot.connect(credentials);\r\n}\r\n\r\nfunction createDJ(djCfg, manager) {\r\n\r\n    // Find voice channel\r\n\r\n    if(!Utils.exists(djCfg['voice-channel'])) return install(false, finishInstallation);\r\n\r\n    var voiceChannel = null;\r\n\r\n    if(Utils.exists(djCfg['server'])) {\r\n        var guild = bot.Guilds.get(djCfg['server']) || bot.Guilds.getBy('name', djCfg['server']);\r\n        if(guild != null) {\r\n            voiceChannel = guild.voiceChannels.filter(function(c) {\r\n                return c.name == djCfg['voice-channel'] || c.id == djCfg['voice-channel'];\r\n            });\r\n            voiceChannel = voiceChannel.length == 0 ? null : voiceChannel[0];\r\n        }\r\n    }\r\n    if(voiceChannel == null) {\r\n        voiceChannel = bot.Channels.get(djCfg['voice-channel']) || bot.Channels.getBy('name', djCfg['voice-channel']);\r\n    }\r\n\r\n    if(voiceChannel == null) return install(false, finishInstallation);\r\n\r\n    if(djCfg['server'] != voiceChannel.guild_id || djCfg['voice-channel'] != voiceChannel.id) {\r\n        configModified = true;\r\n    }\r\n    djCfg['server'] = voiceChannel.guild_id;\r\n    djCfg['voice-channel'] = voiceChannel.id;\r\n\r\n    // Prepare config\r\n\r\n    if(!Utils.exists(djCfg['bitrate'])) {\r\n        djCfg['bitrate'] = 64;\r\n        configModified = true;\r\n    }\r\n\r\n    if(!Utils.exists(djCfg['changeStatus'])) {\r\n        djCfg['changeStatus'] = false;\r\n        configModified = true;\r\n    }\r\n\r\n    if(!Utils.exists(djCfg['rating'])) {\r\n        djCfg['rating'] = {\r\n            'enabled': true,\r\n            'min-votes': 3,\r\n            'min-dislikes': 65\r\n        };\r\n        configModified = true;\r\n    }\r\n    if(!Utils.exists(djCfg['chat-info'])) {\r\n        djCfg['chat-info'] = {\r\n            'now-playing-prefix': '**Now Playing:** ',\r\n            'song-history-channel': null,\r\n            'info-channel': null\r\n        };\r\n        configModified = true;\r\n    }\r\n\r\n    if(!Utils.exists(djCfg['mode'])) {\r\n        djCfg['mode'] = {\r\n            'type': 'dj',\r\n            'waitlist': {\r\n                'limit': 50,\r\n                'dj-role': null,\r\n                'list-role': null\r\n            }\r\n        };\r\n        configModified = true;\r\n    } else {\r\n        if(djCfg['mode']['type'] != 'dj' && Utils.exists(djCfg['mode']['waitlist'])) {\r\n            delete djCfg['mode']['waitlist'];\r\n            configModified = true;\r\n        }\r\n\r\n        if(djCfg['mode']['type'] != 'playlist' && Utils.exists(djCfg['mode']['playlists'])) {\r\n            delete djCfg['mode']['playlists'];\r\n            configModified = true;\r\n        }\r\n    }\r\n\r\n    // Find text channels and roles\r\n\r\n    var guild = voiceChannel.guild;\r\n    var textCh = guild.textChannels;\r\n\r\n    var shCh = djCfg['chat-info']['song-history-channel'];\r\n    shCh = textCh.filter(c => c.id == shCh || c.name == shCh);\r\n    shCh = shCh.length > 0 ? shCh[0] : null;\r\n\r\n    var infCh = djCfg['chat-info']['info-channel'];\r\n    infCh = textCh.filter(c => c.id == infCh || c.name == infCh);\r\n    infCh = infCh.length > 0 ? infCh[0] : null;\r\n\r\n    if(shCh != null && shCh.id != djCfg['chat-info']['song-history-channel']) {\r\n        djCfg['chat-info']['song-history-channel'] = shCh.id;\r\n        configModified = true;\r\n    }\r\n    if(infCh != null && infCh.id != djCfg['chat-info']['info-channel']) {\r\n        djCfg['chat-info']['info-channel'] = infCh.id;\r\n        configModified = true;\r\n    }\r\n\r\n    var mode = null;\r\n\r\n    if(djCfg['mode']['type'] == 'dj') {\r\n        var roles = guild.roles;\r\n\r\n        var djRole = djCfg['mode']['waitlist']['dj-role'];\r\n        djRole = roles.filter(r => r.id == djRole || r.name == djRole);\r\n        djRole = djRole.length > 0 ? djRole[0] : null;\r\n\r\n        var listRole = djCfg['mode']['waitlist']['list-role'];\r\n        listRole = roles.filter(r => r.id == listRole || r.name == listRole);\r\n        listRole = listRole.length > 0 ? listRole[0] : null;\r\n\r\n        if(djRole != null && djRole.id == djCfg['mode']['waitlist']['dj-role']) {\r\n            djCfg['mode']['waitlist']['dj-role'] = djRole.id;\r\n            configModified = true;\r\n        }\r\n\r\n        if(listRole != null && listRole.id == djCfg['mode']['waitlist']['list-role']) {\r\n            djCfg['mode']['waitlist']['list-role'] = listRole.id;\r\n            configModified = true;\r\n        }\r\n\r\n        mode = new DiscordDJ.DJMode({\r\n            'limit': djCfg['mode']['waitlist']['limit'],\r\n            'dj-role': djRole,\r\n            'list-role': listRole\r\n        });\r\n    } else if(djCfg['mode']['type'] == 'playlist') {\r\n        if(!Utils.exists(djCfg['mode']['playlists'])) {\r\n            djCfg['mode']['playlists'] = [];\r\n            configModified = true;\r\n        }\r\n        mode = new DiscordDJ.PlaylistMode(djCfg['mode']['playlists']);\r\n    } else {\r\n        mode = null;\r\n    }\r\n\r\n    // Initialize DJ\r\n\r\n    console.log('Initializing DJ in \"' + voiceChannel.guild.name + '\"');\r\n    manager.create(voiceChannel, DiscordDJ.BotDJ).then(function(dj) {\r\n\r\n        if(djCfg['rating']['enabled']) {\r\n            dj.enableRating({\r\n                minVotes: djCfg['rating']['min-votes'],\r\n                minDislikes: djCfg['rating']['min-dislikes']\r\n            });\r\n        } else {\r\n            dj.disableRating();\r\n        }\r\n\r\n        if(shCh != null || infCh != null) {\r\n            dj.enableInfo({\r\n                nowPlayingPrefix: djCfg['chat-info']['now-playing-prefix'],\r\n                songHistoryChannel: shCh,\r\n                infoChannel: infCh\r\n            });\r\n        } else {\r\n            dj.disableInfo();\r\n        }\r\n\r\n        dj.mode = mode;\r\n        dj.bitrate = djCfg['bitrate'];\r\n\r\n        if(djCfg['changeStatus']) {\r\n            dj.on('play', function() {\r\n                bot.User.setStatus(null, {name: dj.playable.getTitle()});\r\n            });\r\n            dj.on('skip', function() {\r\n                bot.User.setStatus(null, null);\r\n            });\r\n        }\r\n\r\n    }, function(err) {\r\n        console.log('An error occurred with the connection to the voice channel: ' + err);\r\n    });\r\n\r\n    return djCfg;\r\n}\r\n\r\nfunction handleConnection() {\r\n    console.log('Connected! Initializing the DJs...');\r\n    connected = true;\r\n\r\n    bot.User.setStatus(null, {name: \"Music\"});\r\n\r\n    if(config['token'] != bot.token) configModified = true;\r\n    config['token'] = bot.token;\r\n\r\n    if(!Utils.exists(config['djs'])) return install(false, finishInstallation);\r\n\r\n    var manager = new DiscordDJ.DJManager(bot);\r\n\r\n    if(!Utils.exists(config['keys'])) {\r\n        config['keys'] = {\r\n            'youtube': '',\r\n            'soundcloud': ''\r\n        };\r\n    }\r\n    manager.setYoutubeKey(config['keys']['youtube']);\r\n    manager.setSoundcloudKey(config['keys']['soundcloud']);\r\n\r\n    for(var i = 0; i < config['djs'].length; i++) {\r\n        config['djs'][i] = createDJ(config['djs'][i], manager);\r\n        if(config['djs'][i] == null) return;\r\n    }\r\n\r\n    loadStuff(manager);\r\n\r\n    if(configModified) {\r\n        fs.writeFile('config.json', JSON.stringify(config, null, 4), function(error) {\r\n            console.log(error == null ? 'Config saved!' : 'An error ocurred while saving the config: ' + error);\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadStuff(manager) {\r\n    if(!Utils.exists(config['commands'])) {\r\n        config['commands'] = {};\r\n        configModified = true;\r\n    }\r\n\r\n    if(manager.handler == null) return;\r\n\r\n    config['commands']['prefixes'] = config['commands']['prefixes'] || ['!', '/'];\r\n\r\n    config['commands']['prefixes'].forEach(function(prefix) {\r\n        manager.handler.addCommandPrefix(prefix);\r\n    });\r\n\r\n    Special.checkUpdate();\r\n    Special.registerCommands(manager.handler);\r\n}\r\n\r\nfunction handleDisconnection() {\r\n    var time;\r\n    if(connected) {\r\n        console.log('The bot has disconnected');\r\n        console.log('Trying to reconnect in 10 seconds...');\r\n        time = 10000;\r\n    } else {\r\n        console.log('Could not connect into the account');\r\n        console.log('Discord is down or the credentials are wrong.');\r\n        console.log('If you want to run the installer again, delete your config file');\r\n        console.log('Trying to reconnect in 30 seconds...');\r\n        time = 30000;\r\n    }\r\n    connected = false;\r\n    setTimeout(connect, time);\r\n}\r\n\r\nfunction finishInstallation(cfg) {\r\n    if(Utils.exists(cfg)) config = cfg;\r\n    handleConnection();\r\n}\r\n\r\ninitDecoders();\r\n\r\nif(config == null) {\r\n    config = {};\r\n    install(true, finishInstallation);\r\n} else {\r\n    connect();\r\n}","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/runtime/Special.js":"var https = require('https');\r\n\r\nvar version;\r\nvar updateAvailable = null;\r\ntry {\r\n    version = require('../package.json').version;\r\n} catch(e) {\r\n    version = null;\r\n}\r\n\r\nvar info = function(handler, obj, userObj, dj, args) {\r\n    var msg = '**DiscordDJ v' + version + '**\\n';\r\n    msg += 'Developed by Guilherme Chaguri (Guichaguri)\\n';\r\n    msg += '\\n';\r\n    if(updateAvailable != null) {\r\n        msg += 'DiscordDJ is outdated!\\n';\r\n        msg += 'Download now v' + updateAvailable + ' at:\\n';\r\n    }\r\n    msg += 'http://guichaguri.github.io/DiscordDJ/\\n';\r\n    handler.sendPrivateMessage(userObj, msg);\r\n};\r\n\r\nvar shutdown = function(handler, obj, userObj, dj, args) {\r\n    //TODO\r\n};\r\n\r\nvar restart = function(handler, obj, userObj, dj, args) {\r\n    //TODO\r\n};\r\n\r\nvar skipAll = function(handler, obj, userObj, dj, args) {\r\n    if(dj == null) return;\r\n    dj.dj.musicQueue = [];\r\n    dj.skip();//TODO remove\r\n};\r\n\r\nfunction checkUpdate() {\r\n    if(version == null) {\r\n        console.log('Could not read version info.');\r\n        return;\r\n    }\r\n    var url = 'https://raw.githubusercontent.com/Guichaguri/DiscordDJ/master/package.json';\r\n    https.get(url, function(res) {\r\n        var result = '';\r\n        res.on('data', function(chunk) {\r\n            result += chunk;\r\n        });\r\n        res.on('end', function() {\r\n            var data = JSON.parse(result);\r\n            if(data.version != version) {\r\n                console.log('New update available!');\r\n                console.log('DiscordDJ v' + data.version);\r\n                console.log('http://guichaguri.github.io/DiscordDJ/');\r\n                updateAvailable = data.version;\r\n            }\r\n        });\r\n    }).on('error', function(e) {\r\n        console.log('Could not check for updates: ' + e);\r\n    });\r\n}\r\n\r\nfunction registerCommands(handler) {\r\n    handler.registerCommand('info', ['info', 'information', 'about'], info, null);\r\n    handler.registerCommand('shutdown', ['shutdown'], shutdown, handler.permissions.MANAGE_PERMISSIONS);\r\n    handler.registerCommand('restart', ['restart', 'reload'], restart, handler.permissions.MANAGE_PERMISSIONS);\r\n    handler.registerCommand('skipall', ['skipall'], skipAll, handler.permissions.MANAGE_PERMISSIONS);\r\n}\r\n\r\nmodule.exports = {\r\n    checkUpdate: checkUpdate,\r\n    registerCommands: registerCommands\r\n};","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/runtime/Installer.js":"var Utils = require('../lib/Logic/Utils.js');\r\nvar Discordie = require('discordie');\r\nvar child_process = require('child_process');\r\n\r\nvar inviteRegex = /https?:\\/\\/discord\\.gg\\/([A-Za-z0-9-]+)\\/?/;\r\n\r\nmodule.exports = function(bot, data, shouldLogin, callback) {\r\n\r\n    var rl = require('readline').createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n    });\r\n\r\n    console.log('Starting installation...');\r\n\r\n    function checkDecoder(cb) {\r\n        var cmds = [\"avconv\", \"ffmpeg\", \"avconv.exe\", \"ffmpeg.exe\"];\r\n        if(Utils.exists(data['decoder-path'])) {\r\n            cmds.unshift(data['decoder-path']);\r\n        } else {\r\n            cmds.unshift(process.cwd() + '/ffmpeg/ffmpeg');\r\n            cmds.unshift(process.cwd() + '/ffmpeg/ffmpeg.exe');\r\n        }\r\n        var encoder = null;\r\n\r\n        for(var i = 0; i < cmds.length; i++) {\r\n            var p = child_process.spawnSync(cmds[i]);\r\n            if(!p.error) {\r\n                console.log('Decoder found.');\r\n                encoder = cmds[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(encoder == null) {\r\n            console.log('The decoder was not found.');\r\n            console.log('Please, install FFmpeg or Libav');\r\n            console.log('After you have done that, press enter (leaving it blank)');\r\n            console.log('If it still doesn\\'t work, paste the executable path (Example: C://ffmpeg/ffmpeg.exe)');\r\n            console.log('http://guichaguri.github.io/DiscordDJ/');\r\n            rl.question(\"Executable Path: \", function(path) {\r\n                data['decoder-path'] = path;\r\n                checkDecoder(cb);\r\n            });\r\n        } else {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    var disconnected = function() {\r\n        console.log('Login Failed.');\r\n        login();\r\n    };\r\n\r\n    function login() {\r\n        rl.question(\"Email: \", function(email) {\r\n            rl.question(\"Password: \", function(pass) {\r\n                data['email'] = email;\r\n                data['password'] = pass;\r\n                bot.connect({email: email, password: pass});\r\n            });\r\n        });\r\n    }\r\n\r\n    function server() {\r\n        data['token'] = bot.token;\r\n\r\n        bot.Dispatcher.removeListener(Discordie.Events.GATEWAY_READY, server);\r\n        bot.Dispatcher.removeListener(Discordie.Events.DISCONNECTED, disconnected);\r\n\r\n        rl.question(\"Voice Channel Invite Link: \", function(link) {\r\n            var code = inviteRegex.exec(link);\r\n            if(code == null) {\r\n                console.log('The invite link is invalid!');\r\n                server();\r\n            } else {\r\n                bot.Invites.accept(code[1]).then(function(res) {\r\n                    if(res.channel.type != 'voice') {\r\n                        console.log('The channel is not a voice channel.');\r\n                        server();\r\n                    } else {\r\n                        var dj = {\r\n                            'server': res.guild.id,\r\n                            'voice-channel': res.channel.id\r\n                        };\r\n                        data['djs'] = [dj];\r\n\r\n                        rl.question(\"Add another server? (Y/N) \", function(answer) {\r\n                            if(answer.toLowerCase() == 'y') {\r\n                                server();\r\n                            } else {\r\n                                rl.close();\r\n                                console.log('Basic information configured! The bot is ready to run now.');\r\n                                callback(data);\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }, function() {\r\n                    console.log('The invite link was not accepted');\r\n                    server();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    if(shouldLogin) {\r\n\r\n        bot.Dispatcher.on(Discordie.Events.GATEWAY_READY, server);\r\n        bot.Dispatcher.on(Discordie.Events.DISCONNECTED, disconnected);\r\n        checkDecoder(login);\r\n\r\n    } else {\r\n\r\n        checkDecoder(server);\r\n\r\n    }\r\n};","/home/travis/build/npmtest/node-npmtest-discord-dj/node_modules/discord-dj/runtime/Loader.js":"var Utils = require('../lib/Logic/Utils.js');\r\nvar DiscordDJ = require('../lib/index.js');\r\n\r\nvar Special = require('./Special.js');\r\n\r\nvar Discordie = require('discordie');\r\nvar fs = require('fs');\r\n\r\nif(Discordie == null) {\r\n    console.log('DiscordDJ is not installed correctly.');\r\n    console.log('Please, install it using \"setup-bot.bat\" or \"setup-bot.sh\"');\r\n    console.log('http://guichaguri.github.io/DiscordDJ/');\r\n    process.exit(0);\r\n}\r\nvar config;\r\ntry {\r\n    config = JSON.parse(fs.readFileSync('config.json', 'utf8'));\r\n} catch(e) {\r\n    config = null;\r\n}\r\nvar configModified = false;\r\nvar connected = false;\r\n\r\nvar bot = new Discordie();\r\nvar manager = null;\r\n\r\nfunction getConfigObject(cfg, def) {\r\n    if(typeof cfg != 'object') cfg = {};\r\n    var obj = {};\r\n    for(var key in def) {\r\n        if(def.hasOwnProperty(key)) {\r\n            if(def[key] != null && typeof def[key] == 'object') {\r\n                obj[key] = getConfigObject(cfg[key], def[key]);\r\n            } else {\r\n                if(typeof cfg[key] == 'undefined') {\r\n                    obj[key] = def[key];\r\n                    configChanged = true;\r\n                } else {\r\n                    obj[key] = cfg[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\nfunction install(shouldLogin, callback) {\r\n    require('./Installer.js')(bot, config, shouldLogin, callback);\r\n    configModified = true;\r\n}\r\n\r\nfunction connect() {\r\n    var credentials = {}, hasCredentials = false;\r\n\r\n    if(Utils.exists(config['token'])) {\r\n        credentials['token'] = config['token'];\r\n        hasCredentials = true;\r\n    }\r\n    if(Utils.exists(config['email']) && Utils.exists(config['password'])) {\r\n        credentials['email'] = config['email'];\r\n        credentials['password'] = config['password'];\r\n        hasCredentials = true;\r\n    }\r\n\r\n    if(!hasCredentials) return install(true, finishInstallation);\r\n\r\n    bot.Dispatcher.removeListener(Discordie.Events.GATEWAY_READY, handleConnection);\r\n    bot.Dispatcher.removeListener(Discordie.Events.DISCONNECTED, handleDisconnection);\r\n    bot.Dispatcher.once(Discordie.Events.GATEWAY_READY, handleConnection);\r\n    bot.Dispatcher.once(Discordie.Events.DISCONNECTED, handleDisconnection);\r\n\r\n    console.log('Trying to connect...');\r\n    bot.connect(credentials);\r\n}\r\n\r\nvar obj = getConfigObject(config, {\r\n    'bla': 'hey',\r\n    'bla2': {\r\n        'bla3': 'hoho',\r\n        'bla4': null\r\n    }\r\n});\r\nconsole.log(obj);\r\n\r\nconsole.log(config);"}